import logging
from pyDatalog import pyDatalog, pyEngine
pyEngine.Logging = True
logging.basicConfig(level=logging.INFO)
pyDatalog.create_terms('node,log,pre,post,node_provzruhwpjnlgcrwwge,log_provtlryrxsfymayzmvm,log_provcsatuhvvlwpomcqa,log_provjovslualeyrqmpud,pre_provymgrlcnyyrddijxq,post_provjebgjgtbdgutsdtg,clock,bcast,crash,missing_log')
pyDatalog.create_terms('Node,Neighbor,SndTime,Pload,Node2,DelivTime,SndTime,X,Pl,Node1,_')
pyDatalog.create_terms('THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD')
pyDatalog.assert_fact('node',"a","b",1)
pyDatalog.assert_fact('node',"a","c",1)
pyDatalog.assert_fact('node',"b","a",1)
pyDatalog.assert_fact('node',"b","c",1)
pyDatalog.assert_fact('node',"c","a",1)
pyDatalog.assert_fact('node',"c","b",1)
pyDatalog.assert_fact('bcast',"a","hello",1)
pyDatalog.assert_fact('clock','a','a',1,2,)
pyDatalog.assert_fact('clock','a','b',1,2,)
pyDatalog.assert_fact('clock','a','c',1,2,)
pyDatalog.assert_fact('clock','b','a',1,2,)
pyDatalog.assert_fact('clock','b','b',1,2,)
pyDatalog.assert_fact('clock','b','c',1,2,)
pyDatalog.assert_fact('clock','c','a',1,2,)
pyDatalog.assert_fact('clock','c','b',1,2,)
pyDatalog.assert_fact('clock','c','c',1,2,)
pyDatalog.assert_fact('clock','a','a',2,3,)
pyDatalog.assert_fact('clock','a','b',2,3,)
pyDatalog.assert_fact('clock','a','c',2,3,)
pyDatalog.assert_fact('clock','b','a',2,3,)
pyDatalog.assert_fact('clock','b','b',2,3,)
pyDatalog.assert_fact('clock','b','c',2,3,)
pyDatalog.assert_fact('clock','c','a',2,3,)
pyDatalog.assert_fact('clock','c','b',2,3,)
pyDatalog.assert_fact('clock','c','c',2,3,)
pyDatalog.assert_fact('clock','a','a',3,4,)
pyDatalog.assert_fact('clock','a','b',3,4,)
pyDatalog.assert_fact('clock','a','c',3,4,)
pyDatalog.assert_fact('clock','b','a',3,4,)
pyDatalog.assert_fact('clock','b','b',3,4,)
pyDatalog.assert_fact('clock','b','c',3,4,)
pyDatalog.assert_fact('clock','c','a',3,4,)
pyDatalog.assert_fact('clock','c','b',3,4,)
pyDatalog.assert_fact('clock','c','c',3,4,)
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONntpvqlubyutuxtsh,TEMPRELATIONbwwjbspilrryajmg')
TEMPRELATIONntpvqlubyutuxtsh(Node,Neighbor,SndTime)<= (node(Node,Neighbor,SndTime)) & ( clock(Node,THISISAWILDCARDoqayuzawtiqpfyjp,SndTime,THISISAWILDCARDwrgagbmtejithcpl))
TEMPRELATIONbwwjbspilrryajmg(Node,Neighbor,OPLOC)<=TEMPRELATIONntpvqlubyutuxtsh(Node,Neighbor,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
node=TEMPRELATIONbwwjbspilrryajmg
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONvsssiackizffsxis,TEMPRELATIONgsszvfzwcezfvpbi')
TEMPRELATIONvsssiackizffsxis(Node,Pload,SndTime)<= (log(Node,Pload,SndTime)) & ( clock(Node,THISISAWILDCARDyddzfqkdbqhnyvrx,SndTime,THISISAWILDCARDdttmfvqngwwbruth))
TEMPRELATIONgsszvfzwcezfvpbi(Node,Pload,OPLOC)<=TEMPRELATIONvsssiackizffsxis(Node,Pload,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
log=TEMPRELATIONgsszvfzwcezfvpbi
log(Node2,Pload,DelivTime) <= (bcast(Node1,Pload,SndTime)) & (node(Node1,Node2,SndTime)) & ( clock(Node1,Node2,SndTime,DelivTime))
log(Node,Pload,SndTime) <= (bcast(Node,Pload,SndTime)) & ( clock(Node,Node,SndTime,THISISAWILDCARDzzsprjczohxklcgn))
pre(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(bcast(X,Pl,1)) )& (~(crash(X,X,THISISAWILDCARDfqqdypkkcpltobhw,SndTime)) )& ( clock(X,X,SndTime,THISISAWILDCARDlkfqccquugzdlndt))
post(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(missing_log(THISISAWILDCARDdpahnktzvkwawarm,Pl,SndTime)) )& ( clock(X,X,SndTime,THISISAWILDCARDqwtdpndllxmxwuka))
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONxgdgxfpcixkeyaul,TEMPRELATIONmyscmurzibjvujyz')
TEMPRELATIONxgdgxfpcixkeyaul(Node,Neighbor,SndTime,SndTime)<= (node(Node,Neighbor,SndTime)) & (clock(Node,THISISAWILDCARDzjdlulhtuptobhlr,SndTime,THISISAWILDCARDwmiqhossqbpivuam))
TEMPRELATIONmyscmurzibjvujyz(Node,Neighbor,OPLOC,SndTime)<=TEMPRELATIONxgdgxfpcixkeyaul(Node,Neighbor,SndTime,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
node_provzruhwpjnlgcrwwge=TEMPRELATIONmyscmurzibjvujyz
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONzitqycyjilmudjqy,TEMPRELATIONohrtumqkieiahgev')
TEMPRELATIONzitqycyjilmudjqy(Node,Pload,SndTime,SndTime)<= (log(Node,Pload,SndTime)) & (clock(Node,THISISAWILDCARDyitfsdkbeqsxqjvd,SndTime,THISISAWILDCARDwrjnfcyiczkjzcsd))
TEMPRELATIONohrtumqkieiahgev(Node,Pload,OPLOC,SndTime)<=TEMPRELATIONzitqycyjilmudjqy(Node,Pload,SndTime,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
log_provtlryrxsfymayzmvm=TEMPRELATIONohrtumqkieiahgev
log_provcsatuhvvlwpomcqa(Node2,Pload,DelivTime,Node1,SndTime) <= (bcast(Node1,Pload,SndTime)) & (node(Node1,Node2,SndTime)) & (clock(Node1,Node2,SndTime,DelivTime))
log_provjovslualeyrqmpud(Node,Pload,SndTime) <= (bcast(Node,Pload,SndTime)) & (clock(Node,Node,SndTime,THISISAWILDCARDfxxxkusmawuwsotu))
pre_provymgrlcnyyrddijxq(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(bcast(X,Pl,1)) )& (~(crash(X,X,THISISAWILDCARDaqcqnhiancltjojp,SndTime)) )& (clock(X,X,SndTime,THISISAWILDCARDrxhrhksyppgxwdav))
post_provjebgjgtbdgutsdtg(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(missing_log(THISISAWILDCARDnuqfgodckzzdadol,Pl,SndTime)) )& (clock(X,X,SndTime,THISISAWILDCARDzlasytevrhhxvirj))
print ( pre(X,Pl,SndTime) )
print ( post(X,Pl,SndTime) )
