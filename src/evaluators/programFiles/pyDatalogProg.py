import logging
from pyDatalog import pyDatalog, pyEngine
pyEngine.Logging = True
logging.basicConfig(level=logging.INFO)
pyDatalog.create_terms('node,log,pre,post,node_provesyfcyqgpohguwdm,log_provqxvifwzmgxunxtoy,log_provpbdstwhouihsdoqj,log_provgmuzxvooxrjzavhh,pre_provcnchmsnrfjspkpop,post_provqsefgdacsagipkjj,clock,bcast,crash,missing_log')
pyDatalog.create_terms('Node,Neighbor,SndTime,Pload,Node2,DelivTime,SndTime,X,Pl,Node1,_')
pyDatalog.create_terms('THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD,THISISAWILDCARD')
pyDatalog.assert_fact('node',"a","b",1)
pyDatalog.assert_fact('node',"a","c",1)
pyDatalog.assert_fact('node',"b","a",1)
pyDatalog.assert_fact('node',"b","c",1)
pyDatalog.assert_fact('node',"c","a",1)
pyDatalog.assert_fact('node',"c","b",1)
pyDatalog.assert_fact('bcast',"a","hello",1)
pyDatalog.assert_fact('clock','a','a',1,2,)
pyDatalog.assert_fact('clock','a','b',1,2,)
pyDatalog.assert_fact('clock','a','c',1,2,)
pyDatalog.assert_fact('clock','b','a',1,2,)
pyDatalog.assert_fact('clock','b','b',1,2,)
pyDatalog.assert_fact('clock','b','c',1,2,)
pyDatalog.assert_fact('clock','c','a',1,2,)
pyDatalog.assert_fact('clock','c','b',1,2,)
pyDatalog.assert_fact('clock','c','c',1,2,)
pyDatalog.assert_fact('clock','a','a',2,3,)
pyDatalog.assert_fact('clock','a','b',2,3,)
pyDatalog.assert_fact('clock','a','c',2,3,)
pyDatalog.assert_fact('clock','b','a',2,3,)
pyDatalog.assert_fact('clock','b','b',2,3,)
pyDatalog.assert_fact('clock','b','c',2,3,)
pyDatalog.assert_fact('clock','c','a',2,3,)
pyDatalog.assert_fact('clock','c','b',2,3,)
pyDatalog.assert_fact('clock','c','c',2,3,)
pyDatalog.assert_fact('clock','a','a',3,4,)
pyDatalog.assert_fact('clock','a','b',3,4,)
pyDatalog.assert_fact('clock','a','c',3,4,)
pyDatalog.assert_fact('clock','b','a',3,4,)
pyDatalog.assert_fact('clock','b','b',3,4,)
pyDatalog.assert_fact('clock','b','c',3,4,)
pyDatalog.assert_fact('clock','c','a',3,4,)
pyDatalog.assert_fact('clock','c','b',3,4,)
pyDatalog.assert_fact('clock','c','c',3,4,)
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONuwtiwgydvsboajyq,TEMPRELATIONlhehnhtwbttpiczz')
TEMPRELATIONuwtiwgydvsboajyq(Node,Neighbor,SndTime)<= (node(Node,Neighbor,SndTime)) & ( clock(Node,THISISAWILDCARDnarwrlzdhzvzbqjj,SndTime,THISISAWILDCARDebpwrpmmqoyhbmop))
TEMPRELATIONlhehnhtwbttpiczz(Node,Neighbor,OPLOC)<=TEMPRELATIONuwtiwgydvsboajyq(Node,Neighbor,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
node=TEMPRELATIONlhehnhtwbttpiczz
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONpvdyxrsnfeyubzsl,TEMPRELATIONzhtzdgjqicyfeubp')
TEMPRELATIONpvdyxrsnfeyubzsl(Node,Pload,SndTime)<= (log(Node,Pload,SndTime)) & ( clock(Node,THISISAWILDCARDaclphceldqtogopb,SndTime,THISISAWILDCARDoozxkhsmxrhyngji))
TEMPRELATIONzhtzdgjqicyfeubp(Node,Pload,OPLOC)<=TEMPRELATIONpvdyxrsnfeyubzsl(Node,Pload,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
log=TEMPRELATIONzhtzdgjqicyfeubp
log(Node2,Pload,DelivTime) <= (bcast(Node1,Pload,SndTime)) & (node(Node1,Node2,SndTime)) & ( clock(Node1,Node2,SndTime,DelivTime))
log(Node,Pload,SndTime) <= (bcast(Node,Pload,SndTime)) & ( clock(Node,Node,SndTime,THISISAWILDCARDsyqdgzeorxjthird))
pre(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(bcast(X,Pl,1)) )& (~(crash(X,X,THISISAWILDCARDguiximthsisaozsm,SndTime)) )& ( clock(X,X,SndTime,THISISAWILDCARDwafgdbvvkjydwfns))
post(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(missing_log(THISISAWILDCARDmjhbnlyxtwctsbqo,Pl,SndTime)) )& ( clock(X,X,SndTime,THISISAWILDCARDbgkgpibnbpjospeg))
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONpwoxwivnxsqxkwuk,TEMPRELATIONtcgqiqeqfnujaocf')
TEMPRELATIONpwoxwivnxsqxkwuk(Node,Neighbor,SndTime,SndTime)<= (node(Node,Neighbor,SndTime)) & (clock(Node,THISISAWILDCARDpikzkjpqyxltnwfl,SndTime,THISISAWILDCARDgxdtfzcrsmzeehio))
TEMPRELATIONtcgqiqeqfnujaocf(Node,Neighbor,OPLOC,SndTime)<=TEMPRELATIONpwoxwivnxsqxkwuk(Node,Neighbor,SndTime,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
node_provesyfcyqgpohguwdm=TEMPRELATIONtcgqiqeqfnujaocf
pyDatalog.create_terms('OPLOC')
pyDatalog.create_terms('TEMPRELATIONvfuavxijflbxibvw,TEMPRELATIONnesnbvrdagheetes')
TEMPRELATIONvfuavxijflbxibvw(Node,Pload,SndTime,SndTime)<= (log(Node,Pload,SndTime)) & (clock(Node,THISISAWILDCARDirviqueikeavljqk,SndTime,THISISAWILDCARDvzazkwemcgxdnshp))
TEMPRELATIONnesnbvrdagheetes(Node,Pload,OPLOC,SndTime)<=TEMPRELATIONvfuavxijflbxibvw(Node,Pload,SndTime,SndTime)&(OPLOC==(lambda SndTime: SndTime+1))
log_provqxvifwzmgxunxtoy=TEMPRELATIONnesnbvrdagheetes
log_provpbdstwhouihsdoqj(Node2,Pload,DelivTime,Node1,SndTime) <= (bcast(Node1,Pload,SndTime)) & (node(Node1,Node2,SndTime)) & (clock(Node1,Node2,SndTime,DelivTime))
log_provgmuzxvooxrjzavhh(Node,Pload,SndTime) <= (bcast(Node,Pload,SndTime)) & (clock(Node,Node,SndTime,THISISAWILDCARDlfbwlsspynklrjzo))
pre_provcnchmsnrfjspkpop(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(bcast(X,Pl,1)) )& (~(crash(X,X,THISISAWILDCARDfnvrtjmtxuciqjzy,SndTime)) )& (clock(X,X,SndTime,THISISAWILDCARDmqhuwnffitndkasf))
post_provqsefgdacsagipkjj(X,Pl,SndTime) <= (log(X,Pl,SndTime)) & (~(missing_log(THISISAWILDCARDkrqhzqmldzpkjehx,Pl,SndTime)) )& (clock(X,X,SndTime,THISISAWILDCARDjjayblznsszgjtoo))
print ( pre(X,Pl,SndTime) )
print ( post(X,Pl,SndTime) )
