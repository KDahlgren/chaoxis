//include "fake_zk2.ded";
include "util/timeout_svc.ded";

// replicas
write(Next, Data, Origin)@async :- write(Origin, Data, Prev), member(Origin, Next), leader(Origin, Origin), notin ack(Origin, Data, Next);


ack(Origin, Data, Acker)@async :- write(Acker, Data, Origin), notin leader(Acker, Acker);
ack(O,D,A)@next :- ack(O,D,A);
write(N,D,O)@next :- write(N, D, O);
ack(Origin, Data, Acker)@async :- leader(Acker, Acker), write(Acker, Data, Origin), notin missing_acker(Acker, Data, _);
missing_acker(Leader, Data, Other) :- leader(Leader, Leader), write(Leader, Data, _), follower(Leader, Other), notin ack(Leader, Data, Other);
follower(L, F) :- member(L, F), leader(L, L), notin leader(L, F);


// dummy
leader(N, L)@next :- leader(N, L);

timer_svc(L, D, 2) :- write(L, D, _);
// the leader is now responsible for membership management.
member(N, Other)@next :- member(N, Other), notin timeout(N, _);
//member(N, Other)@next :- member(N, Other), notin missing_acker(N, D, Other), timeout(L, D);
member(N, Other)@next :- member(N, Other), leader(N, N), timeout(N, D), ack(N, D, Other);

// bug fix: refuse to ack when we have a trivial quorum
//missing_acker(L, D, "trivial") :- leader(L, L), write(L, D, _), notin follower(L, _);

// client
write(M, D, O)@async :- write_req(O, D), leader(O, M);


// replica init
/*
zookeeper("a", "Z")@1;
zookeeper("b", "Z")@1;
zookeeper("c", "Z")@1;
zookeeper("C", "Z")@1;
zookeeper("Z", "Z")@1;
begin("a")@1;
begin("b")@1;
begin("c")@1;
*/

// a is the leader:
leader("a","a")@1;
leader("b","a")@1;
leader("c","a")@1;
leader("C","a")@1;
member("a", "b")@1;
member("a", "c")@1;
member("a", "d")@1;





// client init
client("C")@1;

// bogus stuff
//leader("Z", "a")@1;
//member("Z", "a")@1;


// write stream
write_req("C", "Data1")@2;
write_req("C", "Data2")@3;
write_req("C", "Data3")@4;


// assertions
tried(C, D)@next :- tried(C, D);
tried(C, D) :- write_req(C, D);

good(D) :- ack("C", D, _), write(R, D, _), notin crash(R, R, _);
good(D) :- tried(C, D), notin ack(C, D, _);

// a pathological case that occurs due to our "preordination" of a as leader
good(D) :- tried(C, D), leader(C, L), notin member(C, L);
//good(D) :- member(D, _);
