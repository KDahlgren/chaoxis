include "fake_zk.ded";

// replicas
write(Next, Data, Origin)@async :- write(Origin, Data, Prev), member(Origin, Next), leader(Origin, Origin), notin ack(Origin, Data, Next);
ack_int(Origin, Data, Acker)@async :- write(Acker, Data, Origin), notin leader(Acker, Acker);
ack(O,D,A)@next :- ack(O,D,A);
ack_int(O,D,A)@next :- ack_int(O,D,A);
write(N,D,O)@next :- write(N, D, O);
ack(Origin, Data, Acker)@async :- leader(Acker, Acker), write(Acker, Data, Origin), notin missing_ack(Acker, Data);
missing_ack(Leader, Data) :- write(Leader, Data, _), member(Leader, Other), notin ack_int(Leader, Data, Other);

// client
write(M, D, O)@async :- write_req(O, D), leader(O, M);


// replica init
zookeeper("a", "Z")@1;
zookeeper("b", "Z")@1;
zookeeper("c", "Z")@1;
zookeeper("C", "Z")@1;
zookeeper("Z", "Z")@1;
begin("a")@1;
begin("b")@1;
begin("c")@1;

// client init
client("C")@1;

// bogus stuff
leader("Z", "a")@1;
member("Z", "a")@1;


// write stream
write_req("C", "Data1")@2;
write_req("C", "Data1")@3;
write_req("C", "Data1")@4;


// assertions
tried(C, D)@next :- tried(C, D);
tried(C, D) :- write_req(C, D);

good(D) :- ack("C", D, _), write(R, D, _), notin crash(R, R, _);
good(D) :- tried(C, D), notin ack(C, D, _);

// a pathological case that occurs due to our "preordination" of a as leader
good(D) :- tried(C, D), leader(C, L), notin member(C, L);
//good(D) :- member(D, _);
