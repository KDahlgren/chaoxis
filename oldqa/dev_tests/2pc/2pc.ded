
// 2pc.ded
// coordinator logic
//prepare(Agent, Coord, Xact)@async :- begin(Coord, Xact), agent(Coord, Agent);
prepare(Agent, Coord, Xact)@async :- running(Coord, Xact), agent(Coord, Agent);
abort(C, X)@next :- vote(C, _, X, "N");
commit(C, X)@next :- vote(C, _, X, "Y"), notin missing_vote(C, X);
missing_vote(C, X) :- agent(C, A), running(C, X), notin vote(C, A, X, "Y");
running(Coord, Xact) :- begin(Coord, Xact);
running(C, X)@next :- running(C, X), notin commit(C, X), notin abort(C, X);
commit(A, X)@async :- commit(C, X), agent(C, A);
abort(A, X)@async :- abort(C, X), agent(C, A);

// agent logic
vote(Coord, Agent, Xact, "Y")@async :- prepare(Agent, Coord, Xact), can(Agent, Xact);
prepared(A, C, X, "Y") :- prepare(A,C,X), can(A,X);

// frame rules
agent(C, A)@next :- agent(C, A);
can(A, X)@next :- can(A, X);
abort(C, X)@next :- abort(C, X);
commit(C, X)@next :- commit(C, X);
vote(C, A, X, S)@next :- vote(C, A, X, S);
prepared(C,A,X,Y)@next :- prepared(C,A,X,Y);


// 2pc_edb.ded
begin("C", "hello")@1;


agent("C", "a")@1;
agent("C", "b")@1;
agent("C", "d")@1;
agent("a", "b")@1;
agent("a", "d")@1;
agent("b", "a")@1;
agent("b", "d")@1;
agent("d", "a")@1;
agent("d", "b")@1;

// both agents can commit
can("a", "hello")@1;
can("b", "hello")@1;
can("d", "hello")@1;


// 2pc_assert.ded
// raise if we never decide

pre("termination", X) :- prepared(_, _, X, _);
post("termination", X) :- decision(A1, X, _), decision(A2, X, _), A1 != A2;

decision(C, X, "c") :- commit(C, X);
decision(C, X, "a") :- abort(C, X);
disagree(X) :- decision(_, X, V1), decision(_, X, V2), V1 != V2;
pre("decide",  X) :- decision(_, X, _);
post("decide", X) :- decision(_, X, V), notin disagree(X);
