//
// author: Dahlgren
//
// a fun example designed to test a subset of targetted functionality.
// the program tests equality and NOT support
// 

// awesome facts
a1( "a", "a" )@1 ;
a1( "a", "b" )@1 ;
a1( "a", "c" )@1 ;

a2( "a", "p" )@1 ;
a2( "a", "x" )@1 ;
a2( "b", "q" )@1 ;
a2( "c", "r" )@1 ;

a3( "a", "x" )@1 ;
a3( "b", "y" )@1 ;
a3( "c", "z" )@1 ;

// brilliant rules
//
// apparently need to describe the fact tables as rules.
// also works without the @next ops.
a1( X, Y )@next :- a1( X, Y ) ;
a2( X, Y )@next :- a2( X, Y ) ;
a3( X, Y )@next :- a3( X, Y ) ;

a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ), Z == "x" ; // yay! == supported ^.^
//a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ) ;
//a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ), X == Y ; // yay! == supported ^.^
//a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ), X != Y ; // hmmmm... doesn't look like c4 likes !=

// example of hacking a NOT
// bwa ha ha! it works... >.>
//a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ), X < Y ; 
//a_table( X, Y, Z ) :- a1( X, Y ), a2( X, Z ), X > Y ; 

 pre( X, Y, Z ) :- a_table( X, Y, Z ) ;
post( X, Y, Z ) :- a_table( X, Y, Z ) ;


